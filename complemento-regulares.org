#+macro: newline @@latex:\\[0.2em]@@ @@html:<br>@@

#+title: Gráficas de clanes{{{newline}}} de complementos{{{newline}}} de gráficas regulares
#+author: Rafael Villarroel Flores, UAEH
#+date: XXXV Coloquio Víctor Neumann-Lara{{{newline}}} de Teoría de las Gráficas, Combinatoria{{{newline}}} y sus Aplicaciones
#+setupfile: options.org

#+latex_header: \usepackage{fontawesome}
#+latex_header: \usepackage{FiraMono}

#+latex: \SetVertexNotLabeledSmall
#+latex: \tikzstyle{EdgeStyle}=[color=white, line width=0.5pt, double=black, double distance=1pt]

#+begin_export latex
\begin{frame}[focus]
\includegraphics[height=9.5cm]{cartel2.png}
\end{frame}
#+end_export

* El operador de clanes{{{newline}}} en gráficas

** Gráficas

   - Consideramos solamente gráficas finitas y simples (no dirigidas,
     sin lazos, sin aristas múltiples).
   - El orden de la gráfica \(G\) se denota con \(|G|\).

** Completas

   Una *completa* de una gráfica es un conjunto de vértices mutuamente
   adyacentes.
   
   #+name: completas
   #+header: :file (by-backend (latex "completas.tikz") (beamer "completas.tikz") (t "completas.png"))
   #+begin_src latex
\begin{tikzpicture}
  \pgfmathsetmacro{\edgel}{2}
  \pgfmathsetmacro{\rad}{\edgel/sqrt(2)}
  \grHouse[RA=\rad]
  \Edge(a0)(a2)
  \Edge(a1)(a3)
  \only<2>{\AddVertexColor{red}{a0,a2,a3}}
  \only<3>{\AddVertexColor{blue}{a0,a1,a4}}
  \only<4>{\AddVertexColor{magenta}{a2}}
\end{tikzpicture}
   #+end_src
   
   #+attr_html: :width 400 :alt completas :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[db755e2dbc6367d938b2661f0478028899dfde3d]: completas
   [[file:completas.png]]

** Clanes

   Un *clan* de una gráfica es una completa maximal bajo inclusión.
   
   #+name: clan
   #+header: :file (by-backend (latex "clan.tikz") (beamer "clan.tikz") (t "clan.png"))
   #+begin_src latex
\begin{tikzpicture}
  \pgfmathsetmacro{\edgel}{2}
  \pgfmathsetmacro{\rad}{\edgel/sqrt(2)}
  \grHouse[RA=\rad]
  \Edge(a0)(a2)
  \Edge(a1)(a3)
  \only<2>{\AddVertexColor{blue}{a0,a1,a4}}
  \only<3>{\AddVertexColor{red}{a0,a1,a2,a3}}
\end{tikzpicture}
   #+end_src
   
   #+attr_html: :width 400 :alt clan :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[3ad1913e41151dd7be1e878d3d5402cacd55f717]: clan
   [[file:clan.png]]

** Gráfica de clanes

   La *gráfica de clanes \(K(G)\)* es la gráfica de intersección de
   los clanes de \(G\). Es decir:

   - \(V\big(K(G)\big)=\{Q\subseteq V(G)\mid Q \text{ es clan de } G\}\),
   - \(E\big(K(G)\big)=\{\{Q_{1},Q_{2}\}\mid Q_{1}\ne Q_{2}, Q_{1}\cap Q_{2}\ne\emptyset\}\).

** Ejemplo

   #+name: graficadeclanes
   #+header: :file (by-backend (latex "graficadeclanes.tikz") (beamer "graficadeclanes.tikz") (t "graficadeclanes.png"))
   #+begin_src latex
\newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
\begin{tikzpicture}
  \pgfmathsetmacro{\edgel}{1.8}
  \pgfmathsetmacro{\rad}{\edgel/sqrt(2)}
  \grHouse[RA=\rad]
  \Edge(a0)(a2)
  \Edge(a1)(a3)   
  \uncover<2>{\AddVertexColor{blue}{a0,a1,a4}}
  \uncover<3>{\AddVertexColor{red}{a0,a1,a2,a3}}
  \graphcaption{0}{-0.9*\edgel}{$G$}
  \uncover<4->{%
    \grPath[RA=\edgel,form=2,rotation=90,x=4,y=\edgel/2]{2}
    \AddVertexColor{red}{a0}
    \AddVertexColor{blue}{a1}
    \graphcaption{4}{-0.9*\edgel}{$K(G)$}
  }
\end{tikzpicture}
   #+end_src
   
   #+attr_html: :width 400 :alt graficadeclanes :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[c8eae88294fb16fe9ef1cc9e2958eacd0cfb7f5e]: graficadeclanes
   [[file:graficadeclanes.png]]

** Gráficas iteradas de clanes

     La sucesión de *gráficas iteradas de clanes* se define como:
     \begin{align*}
     K^{0}(G) &= G,\\
     K^{n}(G) &= K^{n-1}(K(G)), \text{ para \(n\geq1\)}.
     \end{align*}

** Ejemplo

     #+name: iteradas
     #+header: :file (by-backend (latex "iteradas.tikz") (beamer "iteradas.tikz") (t "iteradas.png"))
     #+begin_src latex
\bigskip
\newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
\begin{tikzpicture}
  \pgfmathsetmacro{\edgel}{1.8}
  \pgfmathsetmacro{\rad}{\edgel/sqrt(2)}
  \grHouse[RA=\rad]
  \Edge(a0)(a2)
  \Edge(a1)(a3)   
  \graphcaption{0}{-0.9*\edgel}{$G$}
  \uncover<2->{%
    \grPath[RA=\edgel,form=2,rotation=90,x=3,y=\edgel/2]{2}
    \graphcaption{3}{-0.9*\edgel}{$K(G)$}
  }
  \uncover<3->{%
    \Vertex[x=6,y=\edgel/2]{x}
    \graphcaption{6}{-0.9*\edgel}{$K^{2}(G)$}
  }
\end{tikzpicture}
     #+end_src
   
     #+attr_html: :width 400 :alt iteradas :align center
     #+attr_latex: :float t :width ""
     #+RESULTS[b17f15fb4ff43b36b9487054115026a2a0ed2368]: iteradas
     [[file:iteradas.png]]

** Prisma

   - El prisma triangular y su gráfica de clanes:

     #+name: prisma
     #+header: :file (by-backend (latex "prisma.tikz") (beamer "prisma.tikz") (t "prisma.png"))
     #+begin_src latex
\bigskip
\newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
\begin{tikzpicture}
  \pgfmathsetmacro{\rad}{1.5}
  \grPrism[RA=\rad, RB=0.4*\rad, rotation=90]{3}
  \graphcaption{0}{-\rad}{Prisma $T_{3}$}
  \grPath[x=3*\rad, form=2, prefix=x, RA=0.7, RS=-\rad/2]{1}
  \grEmptyPath[x=3*\rad, form=2, prefix=y, RA=\rad, RS=\rad/4]{3}
  \grPath[x=3*\rad, form=2, prefix=z, RA=0.7, RS=\rad]{1}
  \EdgeFromOneToAll{x}{y}{0}{3}
  \EdgeFromOneToAll{z}{y}{0}{3}
  \graphcaption{3*\rad}{-\rad}{$K(T_{3})$}
\end{tikzpicture}
\bigskip
     #+end_src

     #+attr_html: :width 400 :alt prisma :align center
     #+attr_latex: :float t :width ""
     #+RESULTS[1e4beeb6c06a180edb4af636ceba743093955f78]: prisma
     [[file:prisma.png]]

   - En este caso, \(K^{2}(T_{3})\cong T_{3}\).

** Iteradas del octaedro

   Si definimos el *octaedro* \(O_{n}\) como \(\overline{nK_{2}}\),
   entonces \(K(O_{n})=O_{2^{n-1}}\). (Neumann-Lara, 1973).

   #+name: iteradasoctaedro
   #+header: :file (by-backend (latex "iteradasoctaedro.tikz") (beamer "iteradasoctaedro.tikz") (t "iteradasoctaedro.png"))
   #+begin_src latex
\bigskip
\newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
\begin{tikzpicture}
  \grOctahedron[RA=1]{3}
  \graphcaption{0}{-1.6}{$G=O_{3}$}

  \uncover<2->{%
    \begin{scope}[xshift=3cm]
      \grOctahedron[RA=1.2]{4}
    \end{scope}
    \graphcaption{3}{-2.0}{$K(G)=O_{4}$}
  }
  \uncover<3->{%
    \begin{scope}[xshift=7.3cm]
      \grOctahedron[RA=2.3]{8}
    \end{scope}
    \graphcaption{7.3}{-3.2}{$K^{2}(G)=O_{8}$}
  }
\end{tikzpicture}
   #+end_src
   
   #+attr_html: :width 400 :alt iteradasoctaedro :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[e896a4fc5be06a748a412df67cc831f900e32e83]: iteradasoctaedro
   [[file:iteradasoctaedro.png]]

** Comportamiento

   - \(G\) es *convergente* si la sucesión de órdenes de las gráficas
     \(|K^{n}(G)|\) es acotada.
   - Si \(G\) no es convergente, decimos que es *divergente*.


* Teoremas sobre comportamiento

** Gráficas Helly

   - La gráfica \(G\) es *Helly* si su colección de clanes tiene la
     propiedad de Helly.
   - Existe un algoritmo polinomial que decide si una gráfica es
     Helly. (Dragan, 1989) (Szwarcfiter, 1997)
   - (Escalante, 1973) Si \(G\) es Helly, entonces \(G\) es convergente.

** Morfismos de gráficas

***                                                          :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.6
    :END:
    Un *morfismo de gráficas* \(f\colon G\to L\) es una función tal
    que \(x\sim y\) implica \(f(x)\sim f(y)\) o \(f(x)=f(y)\).

***                                                          :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.4
    :END:
    #+name: morfismo
    #+header: :file (by-backend (latex "morfismo.tikz") (beamer "morfismo.tikz") (t "morfismo.png"))
    #+begin_src latex
\begin{tikzpicture}
  \newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
  \grMan[RA=1]
  \graphcaption{0}{-3}{\(G\)}
  \AddVertexColor{red}{a0,a1,a2,a3}
  \AddVertexColor{blue}{a4,a5,a6}
  \AddVertexColor{green}{a7}
  \AddVertexColor{orange}{a8,a9}
  \grPath[x=2, y=-2, form=1, rotation=90, RA=1]{4}
  \graphcaption{2}{-3}{\(L\)}
  \AddVertexColor{red}{a3}
  \AddVertexColor{blue}{a2}
  \AddVertexColor{green}{a1}
  \AddVertexColor{orange}{a0}
\end{tikzpicture}
    #+end_src
    
    #+attr_html: :width 400 :alt morfismo :align center
    #+attr_latex: :float t :width ""
    #+RESULTS[bfb63258ac3cadea7b2a94dcd0da159a0a253b1f]: morfismo
    [[file:morfismo.png]]

** Retracciones 

***                                                          :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.6
    :END:
    Si \(L\) es una subgráfica de \(G\), una *retracción* \(r\colon
    G\to L\) es un morfismo tal que \(r(x)=x\) para todo \(x\in L\).

***                                                          :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.4
    :END:
    #+name: retracción
    #+header: :file (by-backend (latex "retracción.tikz") (beamer "retracción.tikz") (t "retracción.png"))
    #+begin_src latex
\setxyzvec[17]
\newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
\begin{tikzpicture}[scale=0.5]%
  [x = {(\xone cm,\yone cm)}, y = {(\xtwo cm,\ytwo cm)}, z =
  {(0cm,1cm)}]
  \begin{scope}[canvas is xy plane at z=0]
    \grEmptyCycle[RA=2,prefix=a,rotation=35]{4}
  \end{scope}
  \begin{scope}[canvas is xy plane at z=-2.5]
    \Vertex{x}
  \end{scope}
  \begin{scope}[canvas is xy plane at z=2.5]
    \Vertex{y}
  \end{scope}
  \EdgeFromOneToAll{x}{a}{}{4}
  \EdgeInGraphLoop{a}{4}
  \EdgeFromOneToAll{y}{a}{}{4}
  \uncover<4>{\graphcaption{6}{6}{$O_{3}$}}
  \uncover<5->{%
    \begin{scope}[canvas is xy plane at z=2.5]
      \Vertex[x=2,y=-2]{z}
    \end{scope}
    \EdgeFromOneToSel{z}{a}{}{0,3} \Edge(z)(y)
  }
  \uncover<6->{%
    \begin{scope}[canvas is xy plane at z=-2.5]
      \Vertex[x=2,y=-2]{w}
    \end{scope}
    \EdgeFromOneToSel{w}{a}{}{0,3} \Edge(w)(x)
  }
  \uncover<7->{\Edge(z)(w)}
  \uncover<8->{%
    {\SetUpEdge[color=magenta,lw=3pt]
      \Edge[style={bend right=45,->}](z)(a3)
      \Edge[style={bend right=45,->}](w)(a0)}
    \graphcaption{7}{7}{retracción}
  }
\end{tikzpicture}
 
    #+end_src
    
    #+attr_html: :width 400 :alt retracción :align center
    #+attr_latex: :float t :width ""
    #+RESULTS[2373d13930725ea7d03e1da79c88a6e2fd782b5f]: retracción
    [[file:retracción.png]]

#+beamer: \pause
#+beamer: \pause
#+beamer: \pause
#+beamer: \pause
#+beamer: \pause

***                                                         :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:
    - (Neumann-Lara, 1976). Si \(r\colon G\to L\) es una retracción,
      entonces se induce una retracción \(K(r)\colon K(G)\to
      K(L)\).
    - En particular, si \(L\) es divergente, entonces \(G\) es
      divergente. 

** Retracciones especiales

   - Un *octaedro especial* en la gráfica \(G\) es una subgráfica
     \(H\) tal que \(H\cong O_{n}\), y tal que un clan de \(H\) es un
     clan de \(G\).
   - (Larrión, Pizaña, V., 2019) Si \(G\) tiene un octaedro especial
     \(H\), entonces \(G\) se retrae a \(H\).
   - Ejemplo: \(G=\overline{C_{9}}\).
     #+name: retesp
     #+header: :file (by-backend (latex "retesp.tikz") (beamer "retesp.tikz") (t "retesp.png"))
     #+begin_src latex
\begin{tikzpicture}
  \grCycle[RA=1.8]{9}
  \uncover<4->{%
    {\SetUpEdge[color=blue,lw=3pt]
      \Edge(a0)(a1)
      \Edge(a3)(a4)
      \Edge(a6)(a7)
      \AddVertexColor{blue}{a0,a1,a3,a4,a6,a7}}}
  \uncover<5->{%
    \node (a0text) at (2.8,0) [align=center] {};
    \draw[->,cyan,line width=4.5pt] (a0text)  -- (a0);
    \node (a3text) at (120:2.8) [align=center] {};
    \draw[->,cyan,line width=4.5pt] (a3text)  -- (a3);
    \node (a6text) at (240:2.8) [align=center] {};
    \draw[->,cyan,line width=4.5pt] (a6text)  -- (a6);}
\end{tikzpicture}
     #+end_src
     
     #+attr_html: :width 400 :alt retesp :align center
     #+attr_latex: :float t :width ""
     #+RESULTS[99c35de5da1561e4e9f897db111a51cace5696a5]: retesp
     [[file:retesp.png]]
  
** COMMENT Expansivas

   - Con la teoría de *gráficas expansivas*, Neumann-Lara (1976) probó
     que las *suspensiones* de ciclos de \(n\) vértices, para \(n\geq
     5\), son divergentes.

     #+name: suspensiones
     #+header: :file (by-backend (latex "suspensiones.tikz") (beamer "suspensiones.tikz") (t "suspensiones.png"))
     #+begin_src latex
\bigskip
\begin{tikzpicture}[scale=1.5]
  \setxyzvec[20]
  \grEmptyCycle[RA=1,prefix=y,rotation=10]{6}
  \begin{scope}[yshift=1.4cm]
    \Vertex{x}
  \end{scope}
  \begin{scope}[yshift=-1.4cm]
    \Vertex{z}
  \end{scope}
  \EdgeFromOneToAll{z}{y}{}{6}
  \Edges(y0,y1,y2,y3,y4,y5,y0)
  \EdgeFromOneToAll{x}{y}{}{6}
  \grCycle[RA=1,prefix=y,rotation=10]{6}
  \Edge(y0)(x)
  \Edge(y1)(x)
\end{tikzpicture}
     #+end_src
   
     #+attr_html: :width 400 :alt suspensiones :align center
     #+attr_latex: :float t :width ""
     #+RESULTS[8c54688637c2b49606e64a51c550637c799a95f8]: suspensiones
     [[file:suspensiones.png]]

** COMMENT Complementos de ciclos

   - Los *complementos* de los ciclos de \(n\) vértices, para \(n\geq
     8\), también son gráficas expansivas, por lo tanto, divergentes.

     #+name: complementos-de-ciclos
     #+header: :file (by-backend (latex "complementos-de-ciclos.tikz") (beamer "complementos-de-ciclos.tikz") (t "complementos-de-ciclos.png"))
     #+begin_src latex
\bigskip
\begin{tikzpicture}
  \grEmptyCycle[RA=2]{8}
  \EdgeInGraphMod{a}{8}{2}
  \EdgeInGraphMod{a}{8}{3}
  \EdgeInGraphMod{a}{8}{4}
\end{tikzpicture}
     #+end_src
     
     #+attr_html: :width 400 :alt complementos-de-ciclos :align center
     #+attr_latex: :float t :width ""
     #+RESULTS[d2570c75d65664e6fc5fe8c0e631004c73643c3a]: complementos-de-ciclos
     [[file:complementos-de-ciclos.png]]
  
** Operaciones en gráficas

   - Si \(G\) y \(H\) son gráficas, denotamos con \(G\cup H\) a su
     *unión disjunta*.
     #+name: union-disjunta
     #+header: :file (by-backend (latex "union-disjunta.tikz") (beamer "union-disjunta.tikz") (t "union-disjunta.png"))  
     #+begin_src latex  
\newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
\begin{tikzpicture}
  \pgfmathsetmacro{\rad}{0.7}
  \grCycle[RA=\rad, rotation=90]{3}
  \graphcaption{0}{-1.3*\rad}{\(G\)}
  \grCycle[RA=(3*\rad)/(4*cos(45)), y=0.25, rotation=45,x=3]{4}
  \graphcaption{3}{-1.3*\rad}{\(H\)}
  \grCycle[RA=\rad, x=6.5, rotation=90]{3}
  \grCycle[RA=(3*\rad)/(4*cos(45)), y=0.25, x=9, rotation=45]{4}
  \graphcaption{7.75}{-1.3*\rad}{\(G\cup H\)}
\end{tikzpicture}
     #+end_src  
       
     #+attr_html: :width 400 :alt union-disjunta :align center  
     #+attr_latex: :float t :width ""  
     #+RESULTS[546995d23495675287314ef5922cc82d33a0e444]: union-disjunta
     [[file:union-disjunta.png]]
  
     \medskip

   - La *suma* \(G+H\) es la gráfica que se obtiene de \(G\cup H\) añadiendo
     todas las aristas entre vértices de \(G\) y de \(H\).
     #+name: suma-de-graficas
     #+header: :file (by-backend (latex "suma-de-graficas.tikz") (beamer "suma-de-graficas.tikz") (t "suma-de-graficas.png"))
     #+begin_src latex
\newcommand{\graphcaption}[4][gray!80!white]{\draw (#2,#3) node [fill=#1]{#4};}
\begin{tikzpicture}
  \pgfmathsetmacro{\rad}{0.7}
  \grPath[RA=\rad, form=2, rotation=90]{3}
  \graphcaption{0}{-1.9*\rad}{\(G\)}
  \grEmptyPath[RA=\rad, x=3, form=2, rotation=90]{2}
  \graphcaption{3}{-1.9*\rad}{\(H\)}
  \grPath[prefix=c, RA=\rad, x=6.5, form=2, rotation=90]{3}
  \grEmptyPath[prefix=d, RA=\rad, x=9, form=2, rotation=90]{2}
  \EdgeFromOneToAll{d}{c}{0}{3}
  \EdgeFromOneToAll{d}{c}{1}{3}
  \graphcaption{7.75}{-1.9*\rad}{\(G+H\)}
\end{tikzpicture}
     #+end_src
     
     #+attr_html: :width 400 :alt suma-de-graficas :align center
     #+attr_latex: :float t :width ""
     #+RESULTS[f4c8bf5e693c29863b29605c9ee8f6c05a4a7693]: suma-de-graficas
     [[file:suma-de-graficas.png]]
  

** 

   - Se tiene que: 
     \begin{equation*}
     \overline{G\cup H}=\overline{G}+\overline{H}.     
     \end{equation*}
   - Estas operaciones y resultados se extienden a más de dos
     gráficas.

** Coafinaciones

   - Una *coafinación* de la gráfica \(G\) es un automorfismo
     \(\sigma\colon G\to G\) tal que para todo \(x\in G\) se tiene que
     \(x\) no es vecino de \(\sigma(x)\).
   - Se puede demostrar que si \(G\) tiene una coafinación, se induce
     una coafinación en \(K(G)\).
   - Si \(G\) y \(H\) tienen una coafinación, se induce una
     coafinación en \(G+H\).

** Ejemplo: Ciclos

   Todos los ciclos con al menos 4 vértices tienen una coafinación.

   #+name: coafinacion
   #+header: :file (by-backend (latex "coafinacion.tikz") (beamer "coafinacion.tikz") (t "coafinacion.png"))
   #+begin_src latex
\pgfmathsetmacro{\rad}{2}
\begin{tikzpicture}[stop jumping]
  \SetVertexLabeledSmall
  \foreach\x in {0,...,5}
  {\pgfmathsetmacro{\ic}{\rad*cos(60*\x)}
    \pgfmathsetmacro{\is}{\rad*sin(60*\x)}
    \pgfmathsetmacro{\fc}{\rad*cos(120+60*\x)}
    \pgfmathsetmacro{\fs}{\rad*sin(120+60*\x)}
    \VertexM[xa=\ic,ya=\is,xb=\fc,yb=\fs,shows=1,starts=2,stops=12]{x\x}
  }
  \Edge(x0)(x1)
  \Edge(x2)(x1)
  \Edge(x2)(x3)
  \Edge(x4)(x3)
  \Edge(x4)(x5)
  \Edge(x0)(x5)
\end{tikzpicture}
   #+end_src
   
   #+attr_html: :width 400 :alt coafinacion :align center
   #+attr_latex: :float t :width ""
   #+RESULTS[8b4d3617cca5a53956a923495e9a01f66aad09bd]: coafinacion
   [[file:coafinacion.png]]

** Ejemplo: Complementos de ciclos

   Todos los complementos de ciclos tienen una coafinación.

   #+name: coafinacion-dos
   #+header: :file (by-backend (latex "coafinacion-dos.tikz") (beamer "coafinacion-dos.tikz") (t "coafinacion-dos.png"))
   #+begin_src latex
\pgfmathsetmacro{\rad}{2}
\begin{tikzpicture}[stop jumping]
  \SetVertexLabeledSmall
  \foreach\x in {0,...,5}
  {\pgfmathsetmacro{\ic}{\rad*cos(60*\x)}
    \pgfmathsetmacro{\is}{\rad*sin(60*\x)}
    \pgfmathsetmacro{\fc}{\rad*cos(60+60*\x)}
    \pgfmathsetmacro{\fs}{\rad*sin(60+60*\x)}
    \VertexM[xa=\ic,ya=\is,xb=\fc,yb=\fs,shows=1,starts=2,stops=12]{x\x}
  }
  \EdgeFromOneToSel{x}{x}{0}{2,3,4}
  \EdgeFromOneToSel{x}{x}{1}{3,4,5}
  \EdgeFromOneToSel{x}{x}{2}{4,5}
  \EdgeFromOneToSel{x}{x}{3}{5}
\end{tikzpicture}
   #+end_src

   #+attr_html: :width 400 :alt coafinacion-dos :align center
   #+attr_latex: :float t :width ""
   #+results: coafinacion-dos

** Teoremas de Víctor Neumann-Lara

   - (Complementos de ciclos) \(\overline{C_{n}}\) es divergente si
     \(n\geq 8\).
   - (Sumando conexo) Si \(G,H\) tienen coafinaciones y \(H\) es
     conexa, entonces \(G+H\) es divergente.
   - (Tres sumandos) Si \(A,B,C\) son gráficas que tienen una
     coafinación, entonces \(A+B+C\) es divergente.


* Complementos de gráficas{{{newline}}} regulares

** Gráficas 1-regulares

*** 1-regulares                                                   :B_theorem:
    :PROPERTIES:
    :BEAMER_env: theorem
    :END:
    Si \(G\) es una gráfica 1-regular con al menos 6 vértices,
    entonces \(\overline{G}\) es divergente.

*** Demostración
    - Si \(G\) es 1-regular, entonces \(G\) es una unión disjunta de
      \(n\) copias de \(K_{2}\). Si \(|G|\geq 6\), entonces \(n\geq 3\).
    - Si \(G=nK_{2}\), entonces \(\overline{G}=O_{n}\), que es
      divergente para \(n\geq 3\). \(\square\)

** Gráficas 2-regulares

*** 2-regulares                                                   :B_theorem:
    :PROPERTIES:
    :BEAMER_env: theorem
    :END:
    Si \(G\) es una gráfica 2-regular con al menos 9 vértices,
    entonces \(\overline{G}\) es divergente.

** 
*** Demostración
    - Si \(G\) es \(2\)-regular, entonces es una unión disjunta de
      ciclos.
    - Entonces \(\overline{G}\) tiene la forma:
      \begin{equation*}
      \overline{G}=\overline{C_{n_{1}}}+\overline{C_{n_{2}}}+\cdots+\overline{C_{n_{r}}}
      \end{equation*}
      es decir, una suma de gráficas, cada una con coafinación.
    - Si \(r=1\), \(\overline{G}\) es divergente pues
      \(|\overline{G}|\geq 8\).
    - Si \(r=2\), uno de los dos sumandos debe tener al menos 5
      vértices. Como \(\overline{C_{n}}\) es conexo si \(n\geq 5\),
      por el teorema del sumando conexo, \(\overline{G}\) es divergente.
    - Si \(r\geq 3\), se aplica el teorema de los tres
      sumandos. \(\square\)

** Observación

   - Si \(G\) es 1-regular y \(|G|\geq 6\), \(\overline{G}\) es divergente.
   - Si \(G\) es 2-regular y \(|G|\geq 9\), \(\overline{G}\) es divergente.
   - Parece razonable conjeturar: Si \(G\) es 3-regular, entonces
     existe \(M\) tal que si \(|G|\geq M\), entonces \(\overline{G}\)
     es divergente.
   - Quizás \(M=12\).

** Gráficas cúbicas con \(\leq\) 10 vértices

   | \(n\) | Cantidad de gráficas \(G\) | \(\overline{G}\) convergente | \(\overline{G}\) divergente |
   |-------+----------------------------+------------------------------+-----------------------------|
   |     4 |                          1 |                            1 |                           0 |
   |     6 |                          2 |                            2 |                           0 |
   |     8 |                          6 |                            6 |                           0 |
   |    10 |                         21 |                            4 |                          17 |

   #+beamer: \pause

   - De las 21 gráficas cúbicas, 19 son conexas. De las conexas, 16
     son divergentes y 3 convergentes.
   - De las 16 divergentes, 9 tienen octaedro especial, 3 se retraen a
     la suspensión de \(C_{5}\), 1 es tal que \(K(G)\) se retrae no
     especialmente a \(O_{3}\), 1 es tal que \(K(G)\) se retrae a la
     suspensión de \(C_{5}\), y 2 tienen octaedro especial en
     \(K^{3}(G)\).
   - Es notable que podamos determinar el comportamiento de todas.

** Gráficas cúbicas con 12 vértices

   - Hay exactamente 94 gráficas cúbicas con 12 vértices, de las
     cuales 9 son disconexas.
   - De las 85 conexas, hay 40 que tienen un octaedro especial.
   - De las 45 que quedan, 28 se retraen a \(O_{3}\), aunque no
     especialmente. 
   - De las 17 que quedan, una se retrae a \(\overline{C_{8}}\).
   - De las 16 restantes, en 3, \(K(G)\) tiene octaedro especial.
   - No he podido determinar el comportamiento de las 13 restantes. 
  
** Tipo de homotopía

   - De las 13 restantes, 6 tienen el tipo de homotopía de \(S^{2}\),
     3 tienen el tipo de \(S^{2}\vee S^{2}\), 1 de \(S^{3}\) y una
     tiene la homología de \(S^{2}\)
   - Las restantes dos \(G\) son notables, pues son contraíbles, pero
     \(K(G)\) tiene el tipo de \(S^{3}\).
   - Estos resultados topológicos sugieren fuertemente que las 13
     restantes son divergentes.
  
** Gráficas cúbicas disconexas

   - \(\overline{K_{4}}+\overline{K_{4}}+\overline{K_{4}}\) es
     divergente por el teorema de los 3 sumandos.
   - \(\overline{K_{4}}+\overline{H}\), donde \(H\) es conexa cúbica
     con 8 vértices es divergente en los 5 casos.
   - \(\overline{T_{3}}+\overline{T_{3}}\) y
     \(\overline{T_{3}}+\overline{K_{3,3}}\) son divergentes por el
     teorema del sumando conexo.
   - Sin embargo, \(\overline{K_{3,3}}+\overline{K_{3,3}}\) *es
     convergente*.
   - Es decir, de las 94 gráficas cúbicas con 12 vértices, todo indica
     que solo una tiene complemento convergente.

** Sin embargo...

   - Hay exactamente 509 gráficas conexas y cúbicas con 14
     vértices. Pero entre ellas hay al menos 5 con complemento
     convergente.
   - Una de ellas:
     #+attr_latex: :float t :height 5cm
     [[file:14v-26.png]]

** 16 vértices

   Hay exactamente 4060 gráficas conexas y cúbicas con 16
   vértices. Pero entre ellas hay al menos una con complemento
   convergente.

   #+attr_latex: :float t :height 5cm
   [[file:16v-3277.png]]

** 18 vértices

   - Hay exactamente 41301 gráficas conexas y cúbicas con 18
     vértices. Entre ellas hay al menos 44 con complemento
     convergente.

   - Una de ellas:
     #+attr_latex: :float t :height 5cm
     [[file:18v-999.png]] 

** 

*** Conjetura

    Para cada \(n\) par, \(n\geq4\), existe una gráfica cúbica \(G\)
    con \(n\) vértices, tal que \(\overline{G}\) es convergente.

**                                                          :B_ignoreheading:
   :PROPERTIES:
   :BEAMER_env: ignoreheading
   :END:
\begin{frame}[focus]
   \begin{huge}
   Gracias
   \end{huge}

  \bigskip

  \begin{large}
  \faGithub{} \texttt{github.com/rvf0068}

  \faTwitter{} \texttt{@rvf0068}
  \end{large}
\end{frame}


* COMMENT Local Variables

# Local Variables:
# org-confirm-babel-evaluate: nil
# org-beamer-outline-frame-title: "Esbozo"
# org-latex-compiler: "lualatex"
# eval: (org-babel-lob-ingest "./options.org")
# eval: (org-sbe maketitle-filter)
# End:
